    @property
    def export_rootfs_dir_path(self):
        # this is for export step only
        return "/var/tmp/target_rootfs"

    @property
    def export_result_dir_path(self):
        # this is for export step only
        return "/var/tmp/export_result"


    @property
    def export_rootfs_dir_hostpath(self):
        return os.path.join(self._chroot_path, self.export_rootfs_dir_path[1:])

    @property
    def export_result_dir_hostpath(self):
        return os.path.join(self._chroot_path, self.export_result_dir_path[1:])


            if self._p._progress == BuildProgress.STEP_CLEANED_UP:
                # export rootfs directory
                assert os.path.exists(t.export_rootfs_dir_hostpath) and not Util.isMount(t.export_rootfs_dir_hostpath)
                Util.shellCall("/bin/mount --bind \"%s\" \"%s\" -o ro" % (self._w.get_old_chroot_dir_path(self._p._getChrootDirName()), t.export_rootfs_dir_hostpath))
                self._bindMountList.append(t.export_rootfs_dir_hostpath)

                # export result directory
                assert os.path.exists(t.export_result_dir_hostpath) and not Util.isMount(t.export_result_dir_hostpath)
                Util.shellCall("/bin/mount --bind \"%s\" \"%s\"" % (self._w.get_old_chroot_dir_path(self._p._getChrootDirName()), t.export_result_dir_hostpath))
                self._bindMountList.append(t.export_result_dir_hostpath)


            # set locale
            m.shell_call("", "eselect locale set %s" % (self._ts.locale))

            # set timezone
            m.shell_call("", "eselect timezone set %s" % (self._ts.timezone))

            # set editor
            m.shell_call("", "eselect editor set %s" % (self._ts.editor))

    DEFAULT_LOCALE = "C.utf8"

    DEFAULT_TIMEZONE = "UTC"

    DEFAULT_EDITOR = "nano"


        if "locale" in settings:
            self.locale = settings["locale"]
            if self.locale is None:
                raise SettingsError("invalid value for \"locale\"")
        else:
            self.locale = self.DEFAULT_LOCALE

        if "timezone" in settings:
            self.timezone = settings["timezone"]
            if self.timezone is None:
                raise SettingsError("invalid value for \"timezone\"")
        else:
            self.timezone = self.DEFAULT_TIMEZONE

        if "editor" in settings:
            self.editor = settings["editor"]
            if self.editor is None:
                raise SettingsError("Invalid value for key \"editor\"")
        else:
            self.editor = self.DEFAULT_EDITOR



            if self._ts.locale != self._ts.DEFAULT_LOCALE:
                __raiseErrorIfPkgNotFound("app-admin/eselect")
            if self._ts.editor != self._ts.DEFAULT_EDITOR:
                __raiseErrorIfPkgNotFound("app-admin/eselect")
            if self._ts.timezone != self._ts.DEFAULT_TIMEZONE:
                __raiseErrorIfPkgNotFound("app-admin/eselect")
                __raiseErrorIfPkgNotFound("app-eselect/eselect-timezone")






        # subprocess.check_call(["cp", "-a", self._rootfsDir, fullfn])      # shutil.copytree() does not support device nodes


        # # generate script
        # if self._arch == "alpha":
        #     self._generate_script(script_dir_hostpath, "main.sh.alpha.in")
        # elif self._arch == "hppa":
        #     self._generate_script(script_dir_hostpath, "main.sh.hppa.in")
        # elif self._arch == "sparc":
        #     self._generate_script(script_dir_hostpath, "main.sh.sparc.in")
        # elif self._arch == "mips":
        #     self._generate_script(script_dir_hostpath, "main.sh.mips.in")
        # elif self._arch in ["amd64", "x86"]:
        #     isolinuxDir = os.path.join(script_dir_hostpath, "isolinux")
        #     os.mkdir(isolinuxDir)

        #     with open(os.path.join(isolinuxDir, "isolinux.cfg"), "w") as f:
        #         f.write("default %s\n" % (self._name))
        #         f.write("timeout 150\n")
        #         f.write("ontimeout localhost\n")
        #         f.write("prompt 1\n")
        #         f.write("\n")
        #         f.write("display boot.msg\n")
        #         f.write("F1 kernels.msg\n")
        #         f.write("F2 F2.msg\n")
        #         f.write("F3 F3.msg\n")
        #         f.write("F4 F4.msg\n")
        #         f.write("F5 F5.msg\n")
        #         f.write("F6 F6.msg\n")
        #         f.write("F7 F7.msg\n")
        #         f.write("\n")
        #         f.write("label %s\n" % (self._name))
        #         f.write("  kernel /boot/vmlinuz\n")
        #         f.write("  append root=/dev/ram0 init=/linuxrc dokeymap looptype=squashfs loop=/image.squashfs cdroot initrd=/boot/initramfs.img vga=791\n")
        #         f.write("\n")
        #         f.write("label %s-nofb\n" % (self._name))
        #         f.write("  kernel /boot/vmlinuz\n")
        #         f.write("  append root=/dev/ram0 init=/linuxrc dokeymap looptype=squashfs loop=/image.squashfs cdroot initrd=/boot/initramfs.img\n")
        #         f.write("\n")
        #         if self._memtest:
        #             f.write("label memtest86\n")
        #             f.write("  kernel memtest86\n")
        #             f.write("\n")
        #         f.write("label localhost\n")
        #         f.write("  localboot -1\n")
        #         f.write("  MENU HIDE\n")

        #     with open(os.path.join(isolinuxDir, "boot.msg"), "w") as f:
        #         f.write("%s\n" % (self._name))
        #         f.write("Enter to boot; F1 for kernels  F2 for options.\n")
        #         f.write("Press any key in the next 15 seconds or we'll try to boot from disk.\n")

        #     with open(os.path.join(isolinuxDir, "kernels.msg"), "w") as f:
        #         f.write("Available kernels:\n")
        #         f.write("  %s\n" % (self._name))
        #         f.write("  %s-nofb\n" % (self._name))
        #         if self._memtest:
        #             f.write("  memtest86\n")

        #     for fullfn in glob.glob(os.path.join(selfDir, "x86-F*.msg")):
        #         shutil.copy(fullfn, os.path.join(isolinuxDir, os.path.basename(fullfn).replace("x86-", "")))

        #     self._generate_script(script_dir_hostpath, "main.sh.isolinux.in")
        # else:
        #     self._generate_script(script_dir_hostpath, "main.sh.grub.in")


        # if self._arch == "alpha":
        #     world_set.add("dev-libs/libisoburn")
        # elif self._arch == "ia64":
        #     world_set.add("sys-fs/mtools")
        #     world_set.add("dev-libs/libisoburn")
        #     world_set.add("sys-boot/grub")
        # elif self._arch == "mips":
        #     world_set.add("sys-boot/sgibootcd")
        # else:
        #     world_set.add("sys-apps/hwdata")
        #     world_set.add("sys-boot/syslinux")
        #     world_set.add("app-cdr/cdrtools")

